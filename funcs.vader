# Using the Vader testing library for vim
# https://github.com/junegunn/vader.vim
# 
# Examples:
# https://github.com/junegunn/vader.vim/blob/master/test/feature/suite1.vader
#
# To run:
# :Vader <file>
Execute (fileSetup):
  let g:ORIG_WD = getcwd()

Before:
  let g:TEMP_DIR = "tmpTest"
  call mkdir(g:TEMP_DIR)


After:
  execute 'cd' g:ORIG_WD
  call delete(g:TEMP_DIR, "rf")


" diff {{{1

# Test case
Execute (should toggle whitespace in diff):
  let &diffopt = "internal,filler"
  AssertEqual "internal,filler", &diffopt

  call ToggleWhiteSpace()

  AssertEqual "internal,filler,iwhite", &diffopt

  call ToggleWhiteSpace()

  AssertEqual "internal,filler", &diffopt

Execute (should cycle diff algorithms):
  let &diffopt = "internal,filler"

  " add when unset
  call CycleDiffAlgorithms()
  AssertEqual "internal,filler,algorithm:minimal", &diffopt

  " add cycle when sett
  call CycleDiffAlgorithms()
  AssertEqual "internal,filler,algorithm:patience", &diffopt

  " should loop list
  call CycleDiffAlgorithms()
  call CycleDiffAlgorithms()
  AssertEqual "internal,filler,algorithm:myers", &diffopt

" OpenOther {{{1

Execute (Should open other file java):
  execute 'cd' g:TEMP_DIR
  let dirMain = "src/main/some/java"
  let dirTest = "src/test/some/java"
  let mainFile = dirMain . '/File.java'
  let testFile = dirTest . '/FileTest.java'
  call system('mkdir -p ' . dirMain . ' ' . dirTest)
  call system('touch ' . mainFile . ' ' . testFile)

  execute 'e' mainFile
  AssertEqual mainFile, expand('%')

  call OpenOther()
  AssertEqual testFile, expand('%')

  call OpenOther()
  AssertEqual mainFile, expand('%')

Execute (Should open other file bashbuilder):
  execute 'cd' g:TEMP_DIR
  let dirMain = "src/main/some/path"
  let dirTest = "src/test/some/path"
  let mainFile = dirMain . '/mainscript.sh'
  let testFile = dirTest . '/test_mainscript.sh'
  call system('mkdir -p ' . dirMain . ' ' . dirTest)
  call system('touch ' . mainFile . ' ' . testFile)

  execute 'e' mainFile
  AssertEqual mainFile, expand('%')

  call OpenOther()
  AssertEqual testFile, expand('%')

  call OpenOther()
  AssertEqual mainFile, expand('%')


" custom par {{{1
Given:
  line 1
  line 2

  line 3

Do:
  gqap

Expect:
  line 1 line 2

  line 3


Given:
  Deff to long dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.

  line 3

Do:
  gqap

Expect:
  Deff to long dolor sit amet, consetetur sadipscing elitr, sed diam
  nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat,
  sed diam voluptua.

  line 3


Given:
  line 1
  line 2


  line 3

Do:
  gqap

Expect:
  line 1 line 2


  line 3



Given:
  line 1\
  line 2


  line 3

Do:
  gqap

Expect:
  line 1\
  line 2


  line 3


" 1: 1
" 2:
" 3: 1
" 4: 1
" 5: 0
" 6:
" 7: 0
" 8: 1

" }}}


" vim:fdm=marker
